/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef DemoService_H
#define DemoService_H

#include <thrift/TDispatchProcessor.h>
#include "demo_types.h"

namespace demo {

class DemoServiceIf {
 public:
  virtual ~DemoServiceIf() {}
  virtual int32_t ping() = 0;
};

class DemoServiceIfFactory {
 public:
  typedef DemoServiceIf Handler;

  virtual ~DemoServiceIfFactory() {}

  virtual DemoServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(DemoServiceIf* /* handler */) = 0;
};

class DemoServiceIfSingletonFactory : virtual public DemoServiceIfFactory {
 public:
  DemoServiceIfSingletonFactory(const boost::shared_ptr<DemoServiceIf>& iface) : iface_(iface) {}
  virtual ~DemoServiceIfSingletonFactory() {}

  virtual DemoServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(DemoServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<DemoServiceIf> iface_;
};

class DemoServiceNull : virtual public DemoServiceIf {
 public:
  virtual ~DemoServiceNull() {}
  int32_t ping() {
    int32_t _return = 0;
    return _return;
  }
};


class DemoService_ping_args {
 public:

  DemoService_ping_args() {
  }

  virtual ~DemoService_ping_args() throw() {}


  bool operator == (const DemoService_ping_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const DemoService_ping_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DemoService_ping_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DemoService_ping_pargs {
 public:


  virtual ~DemoService_ping_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DemoService_ping_result__isset {
  _DemoService_ping_result__isset() : success(false) {}
  bool success;
} _DemoService_ping_result__isset;

class DemoService_ping_result {
 public:

  DemoService_ping_result() : success(0) {
  }

  virtual ~DemoService_ping_result() throw() {}

  int32_t success;

  _DemoService_ping_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const DemoService_ping_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DemoService_ping_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DemoService_ping_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DemoService_ping_presult__isset {
  _DemoService_ping_presult__isset() : success(false) {}
  bool success;
} _DemoService_ping_presult__isset;

class DemoService_ping_presult {
 public:


  virtual ~DemoService_ping_presult() throw() {}

  int32_t* success;

  _DemoService_ping_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class DemoServiceClient : virtual public DemoServiceIf {
 public:
  DemoServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  DemoServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int32_t ping();
  void send_ping();
  int32_t recv_ping();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class DemoServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<DemoServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (DemoServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_ping(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  DemoServiceProcessor(boost::shared_ptr<DemoServiceIf> iface) :
    iface_(iface) {
    processMap_["ping"] = &DemoServiceProcessor::process_ping;
  }

  virtual ~DemoServiceProcessor() {}
};

class DemoServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  DemoServiceProcessorFactory(const ::boost::shared_ptr< DemoServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< DemoServiceIfFactory > handlerFactory_;
};

class DemoServiceMultiface : virtual public DemoServiceIf {
 public:
  DemoServiceMultiface(std::vector<boost::shared_ptr<DemoServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~DemoServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<DemoServiceIf> > ifaces_;
  DemoServiceMultiface() {}
  void add(boost::shared_ptr<DemoServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  int32_t ping() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ping();
    }
    return ifaces_[i]->ping();
  }

};

} // namespace

#endif
