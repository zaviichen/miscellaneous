// Generated by ProtoGen, Version=2.4.1.521, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace Tdx {
  
  namespace Proto {
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Tick {
    
      #region Extension registration
      public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
      }
      #endregion
      #region Static variables
      internal static pbd::MessageDescriptor internal__static_common_Tick__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::Tdx.Tick, global::Tdx.Tick.Builder> internal__static_common_Tick__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_common_Quote__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::Tdx.Quote, global::Tdx.Quote.Builder> internal__static_common_Quote__FieldAccessorTable;
      #endregion
      #region Descriptor
      public static pbd::FileDescriptor Descriptor {
        get { return descriptor; }
      }
      private static pbd::FileDescriptor descriptor;
      
      static Tick() {
        byte[] descriptorData = global::System.Convert.FromBase64String(
            "Cgp0aWNrLnByb3RvEgZjb21tb24ixgMKBFRpY2sSEAoIZGF0ZXRpbWUYASAC" + 
            "KAMSEwoIbWlsbGlzZWMYAiABKAM6ATASFQoNaW5zdHJ1bWVudF9pZBgDIAIo" + 
            "CRISCgpsYXN0X3ByaWNlGAQgAigBEhIKCm9wZW5fcHJpY2UYBSACKAESEwoL" + 
            "Y2xvc2VfcHJpY2UYBiACKAESEgoKaGlnaF9wcmljZRgHIAIoARIRCglsb3df" + 
            "cHJpY2UYCCACKAESDgoGdm9sdW1lGAkgAigDEg4KBnBlcmlvZBgKIAIoCRIc" + 
            "CgVxdW90ZRgLIAEoCzINLmNvbW1vbi5RdW90ZRITCgtleGNoYW5nZV9pZBgM" + 
            "IAEoCRIQCgh0dXJub3ZlchgNIAEoARIsCgdhcHBseXRvGA4gASgOMhQuY29t" + 
            "bW9uLlRpY2suQXBwbHlUbzoFQ0xPU0USDAoEZ2VuZRgeIAEoARIRCglpc19h" + 
            "ZGp1c3QYHyABKAgSDgoGYW1vdW50GCAgASgDIlgKB0FwcGx5VG8SCAoET1BF" + 
            "ThABEgkKBUNMT1NFEAISCAoESElHSBADEgcKA0xPVxAEEgoKBk1FRElBThAF" + 
            "EgsKB1RZUElDQUwQBhIMCghXRUlHSFRFRBAHIlUKBVF1b3RlEhEKCWFza19w" + 
            "cmljZRgBIAMoARIRCgliaWRfcHJpY2UYAiADKAESEgoKYXNrX3ZvbHVtZRgD" + 
            "IAMoAxISCgpiaWRfdm9sdW1lGAQgAygDQhoKDGNvbW1vbi5wcm90b0IKVGlj" + 
            "a1Byb3Rvcw==");
        pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
          descriptor = root;
          internal__static_common_Tick__Descriptor = Descriptor.MessageTypes[0];
          internal__static_common_Tick__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::Tdx.Tick, global::Tdx.Tick.Builder>(internal__static_common_Tick__Descriptor,
                  new string[] { "Datetime", "Millisec", "InstrumentId", "LastPrice", "OpenPrice", "ClosePrice", "HighPrice", "LowPrice", "Volume", "Period", "Quote", "ExchangeId", "Turnover", "Applyto", "Gene", "IsAdjust", "Amount", });
          internal__static_common_Quote__Descriptor = Descriptor.MessageTypes[1];
          internal__static_common_Quote__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::Tdx.Quote, global::Tdx.Quote.Builder>(internal__static_common_Quote__Descriptor,
                  new string[] { "AskPrice", "BidPrice", "AskVolume", "BidVolume", });
          return null;
        };
        pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
            new pbd::FileDescriptor[] {
            }, assigner);
      }
      #endregion
      
    }
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Tick : pb::GeneratedMessage<Tick, Tick.Builder> {
    private Tick() { }
    private static readonly Tick defaultInstance = new Tick().MakeReadOnly();
    private static readonly string[] _tickFieldNames = new string[] { "amount", "applyto", "close_price", "datetime", "exchange_id", "gene", "high_price", "instrument_id", "is_adjust", "last_price", "low_price", "millisec", "open_price", "period", "quote", "turnover", "volume" };
    private static readonly uint[] _tickFieldTags = new uint[] { 256, 112, 49, 8, 98, 241, 57, 26, 248, 33, 65, 16, 41, 82, 90, 105, 72 };
    public static Tick DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Tick DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Tick ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Tdx.Proto.Tick.internal__static_common_Tick__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Tick, Tick.Builder> InternalFieldAccessors {
      get { return global::Tdx.Proto.Tick.internal__static_common_Tick__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      public enum ApplyTo {
        OPEN = 1,
        CLOSE = 2,
        HIGH = 3,
        LOW = 4,
        MEDIAN = 5,
        TYPICAL = 6,
        WEIGHTED = 7,
      }
      
    }
    #endregion
    
    public const int DatetimeFieldNumber = 1;
    private bool hasDatetime;
    private long datetime_;
    public bool HasDatetime {
      get { return hasDatetime; }
    }
    public long Datetime {
      get { return datetime_; }
    }
    
    public const int MillisecFieldNumber = 2;
    private bool hasMillisec;
    private long millisec_;
    public bool HasMillisec {
      get { return hasMillisec; }
    }
    public long Millisec {
      get { return millisec_; }
    }
    
    public const int InstrumentIdFieldNumber = 3;
    private bool hasInstrumentId;
    private string instrumentId_ = "";
    public bool HasInstrumentId {
      get { return hasInstrumentId; }
    }
    public string InstrumentId {
      get { return instrumentId_; }
    }
    
    public const int LastPriceFieldNumber = 4;
    private bool hasLastPrice;
    private double lastPrice_;
    public bool HasLastPrice {
      get { return hasLastPrice; }
    }
    public double LastPrice {
      get { return lastPrice_; }
    }
    
    public const int OpenPriceFieldNumber = 5;
    private bool hasOpenPrice;
    private double openPrice_;
    public bool HasOpenPrice {
      get { return hasOpenPrice; }
    }
    public double OpenPrice {
      get { return openPrice_; }
    }
    
    public const int ClosePriceFieldNumber = 6;
    private bool hasClosePrice;
    private double closePrice_;
    public bool HasClosePrice {
      get { return hasClosePrice; }
    }
    public double ClosePrice {
      get { return closePrice_; }
    }
    
    public const int HighPriceFieldNumber = 7;
    private bool hasHighPrice;
    private double highPrice_;
    public bool HasHighPrice {
      get { return hasHighPrice; }
    }
    public double HighPrice {
      get { return highPrice_; }
    }
    
    public const int LowPriceFieldNumber = 8;
    private bool hasLowPrice;
    private double lowPrice_;
    public bool HasLowPrice {
      get { return hasLowPrice; }
    }
    public double LowPrice {
      get { return lowPrice_; }
    }
    
    public const int VolumeFieldNumber = 9;
    private bool hasVolume;
    private long volume_;
    public bool HasVolume {
      get { return hasVolume; }
    }
    public long Volume {
      get { return volume_; }
    }
    
    public const int PeriodFieldNumber = 10;
    private bool hasPeriod;
    private string period_ = "";
    public bool HasPeriod {
      get { return hasPeriod; }
    }
    public string Period {
      get { return period_; }
    }
    
    public const int QuoteFieldNumber = 11;
    private bool hasQuote;
    private global::Tdx.Quote quote_;
    public bool HasQuote {
      get { return hasQuote; }
    }
    public global::Tdx.Quote Quote {
      get { return quote_ ?? global::Tdx.Quote.DefaultInstance; }
    }
    
    public const int ExchangeIdFieldNumber = 12;
    private bool hasExchangeId;
    private string exchangeId_ = "";
    public bool HasExchangeId {
      get { return hasExchangeId; }
    }
    public string ExchangeId {
      get { return exchangeId_; }
    }
    
    public const int TurnoverFieldNumber = 13;
    private bool hasTurnover;
    private double turnover_;
    public bool HasTurnover {
      get { return hasTurnover; }
    }
    public double Turnover {
      get { return turnover_; }
    }
    
    public const int ApplytoFieldNumber = 14;
    private bool hasApplyto;
    private global::Tdx.Tick.Types.ApplyTo applyto_ = global::Tdx.Tick.Types.ApplyTo.CLOSE;
    public bool HasApplyto {
      get { return hasApplyto; }
    }
    public global::Tdx.Tick.Types.ApplyTo Applyto {
      get { return applyto_; }
    }
    
    public const int GeneFieldNumber = 30;
    private bool hasGene;
    private double gene_;
    public bool HasGene {
      get { return hasGene; }
    }
    public double Gene {
      get { return gene_; }
    }
    
    public const int IsAdjustFieldNumber = 31;
    private bool hasIsAdjust;
    private bool isAdjust_;
    public bool HasIsAdjust {
      get { return hasIsAdjust; }
    }
    public bool IsAdjust {
      get { return isAdjust_; }
    }
    
    public const int AmountFieldNumber = 32;
    private bool hasAmount;
    private long amount_;
    public bool HasAmount {
      get { return hasAmount; }
    }
    public long Amount {
      get { return amount_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasDatetime) return false;
        if (!hasInstrumentId) return false;
        if (!hasLastPrice) return false;
        if (!hasOpenPrice) return false;
        if (!hasClosePrice) return false;
        if (!hasHighPrice) return false;
        if (!hasLowPrice) return false;
        if (!hasVolume) return false;
        if (!hasPeriod) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _tickFieldNames;
      if (hasDatetime) {
        output.WriteInt64(1, field_names[3], Datetime);
      }
      if (hasMillisec) {
        output.WriteInt64(2, field_names[11], Millisec);
      }
      if (hasInstrumentId) {
        output.WriteString(3, field_names[7], InstrumentId);
      }
      if (hasLastPrice) {
        output.WriteDouble(4, field_names[9], LastPrice);
      }
      if (hasOpenPrice) {
        output.WriteDouble(5, field_names[12], OpenPrice);
      }
      if (hasClosePrice) {
        output.WriteDouble(6, field_names[2], ClosePrice);
      }
      if (hasHighPrice) {
        output.WriteDouble(7, field_names[6], HighPrice);
      }
      if (hasLowPrice) {
        output.WriteDouble(8, field_names[10], LowPrice);
      }
      if (hasVolume) {
        output.WriteInt64(9, field_names[16], Volume);
      }
      if (hasPeriod) {
        output.WriteString(10, field_names[13], Period);
      }
      if (hasQuote) {
        output.WriteMessage(11, field_names[14], Quote);
      }
      if (hasExchangeId) {
        output.WriteString(12, field_names[4], ExchangeId);
      }
      if (hasTurnover) {
        output.WriteDouble(13, field_names[15], Turnover);
      }
      if (hasApplyto) {
        output.WriteEnum(14, field_names[1], (int) Applyto, Applyto);
      }
      if (hasGene) {
        output.WriteDouble(30, field_names[5], Gene);
      }
      if (hasIsAdjust) {
        output.WriteBool(31, field_names[8], IsAdjust);
      }
      if (hasAmount) {
        output.WriteInt64(32, field_names[0], Amount);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasDatetime) {
          size += pb::CodedOutputStream.ComputeInt64Size(1, Datetime);
        }
        if (hasMillisec) {
          size += pb::CodedOutputStream.ComputeInt64Size(2, Millisec);
        }
        if (hasInstrumentId) {
          size += pb::CodedOutputStream.ComputeStringSize(3, InstrumentId);
        }
        if (hasLastPrice) {
          size += pb::CodedOutputStream.ComputeDoubleSize(4, LastPrice);
        }
        if (hasOpenPrice) {
          size += pb::CodedOutputStream.ComputeDoubleSize(5, OpenPrice);
        }
        if (hasClosePrice) {
          size += pb::CodedOutputStream.ComputeDoubleSize(6, ClosePrice);
        }
        if (hasHighPrice) {
          size += pb::CodedOutputStream.ComputeDoubleSize(7, HighPrice);
        }
        if (hasLowPrice) {
          size += pb::CodedOutputStream.ComputeDoubleSize(8, LowPrice);
        }
        if (hasVolume) {
          size += pb::CodedOutputStream.ComputeInt64Size(9, Volume);
        }
        if (hasPeriod) {
          size += pb::CodedOutputStream.ComputeStringSize(10, Period);
        }
        if (hasQuote) {
          size += pb::CodedOutputStream.ComputeMessageSize(11, Quote);
        }
        if (hasExchangeId) {
          size += pb::CodedOutputStream.ComputeStringSize(12, ExchangeId);
        }
        if (hasTurnover) {
          size += pb::CodedOutputStream.ComputeDoubleSize(13, Turnover);
        }
        if (hasApplyto) {
          size += pb::CodedOutputStream.ComputeEnumSize(14, (int) Applyto);
        }
        if (hasGene) {
          size += pb::CodedOutputStream.ComputeDoubleSize(30, Gene);
        }
        if (hasIsAdjust) {
          size += pb::CodedOutputStream.ComputeBoolSize(31, IsAdjust);
        }
        if (hasAmount) {
          size += pb::CodedOutputStream.ComputeInt64Size(32, Amount);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Tick ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Tick ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Tick ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Tick ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Tick ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Tick ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Tick ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Tick ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Tick ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Tick ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Tick MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Tick prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Tick, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Tick cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Tick result;
      
      private Tick PrepareBuilder() {
        if (resultIsReadOnly) {
          Tick original = result;
          result = new Tick();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Tick MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Tdx.Tick.Descriptor; }
      }
      
      public override Tick DefaultInstanceForType {
        get { return global::Tdx.Tick.DefaultInstance; }
      }
      
      public override Tick BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Tick) {
          return MergeFrom((Tick) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Tick other) {
        if (other == global::Tdx.Tick.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasDatetime) {
          Datetime = other.Datetime;
        }
        if (other.HasMillisec) {
          Millisec = other.Millisec;
        }
        if (other.HasInstrumentId) {
          InstrumentId = other.InstrumentId;
        }
        if (other.HasLastPrice) {
          LastPrice = other.LastPrice;
        }
        if (other.HasOpenPrice) {
          OpenPrice = other.OpenPrice;
        }
        if (other.HasClosePrice) {
          ClosePrice = other.ClosePrice;
        }
        if (other.HasHighPrice) {
          HighPrice = other.HighPrice;
        }
        if (other.HasLowPrice) {
          LowPrice = other.LowPrice;
        }
        if (other.HasVolume) {
          Volume = other.Volume;
        }
        if (other.HasPeriod) {
          Period = other.Period;
        }
        if (other.HasQuote) {
          MergeQuote(other.Quote);
        }
        if (other.HasExchangeId) {
          ExchangeId = other.ExchangeId;
        }
        if (other.HasTurnover) {
          Turnover = other.Turnover;
        }
        if (other.HasApplyto) {
          Applyto = other.Applyto;
        }
        if (other.HasGene) {
          Gene = other.Gene;
        }
        if (other.HasIsAdjust) {
          IsAdjust = other.IsAdjust;
        }
        if (other.HasAmount) {
          Amount = other.Amount;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_tickFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _tickFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasDatetime = input.ReadInt64(ref result.datetime_);
              break;
            }
            case 16: {
              result.hasMillisec = input.ReadInt64(ref result.millisec_);
              break;
            }
            case 26: {
              result.hasInstrumentId = input.ReadString(ref result.instrumentId_);
              break;
            }
            case 33: {
              result.hasLastPrice = input.ReadDouble(ref result.lastPrice_);
              break;
            }
            case 41: {
              result.hasOpenPrice = input.ReadDouble(ref result.openPrice_);
              break;
            }
            case 49: {
              result.hasClosePrice = input.ReadDouble(ref result.closePrice_);
              break;
            }
            case 57: {
              result.hasHighPrice = input.ReadDouble(ref result.highPrice_);
              break;
            }
            case 65: {
              result.hasLowPrice = input.ReadDouble(ref result.lowPrice_);
              break;
            }
            case 72: {
              result.hasVolume = input.ReadInt64(ref result.volume_);
              break;
            }
            case 82: {
              result.hasPeriod = input.ReadString(ref result.period_);
              break;
            }
            case 90: {
              global::Tdx.Quote.Builder subBuilder = global::Tdx.Quote.CreateBuilder();
              if (result.hasQuote) {
                subBuilder.MergeFrom(Quote);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Quote = subBuilder.BuildPartial();
              break;
            }
            case 98: {
              result.hasExchangeId = input.ReadString(ref result.exchangeId_);
              break;
            }
            case 105: {
              result.hasTurnover = input.ReadDouble(ref result.turnover_);
              break;
            }
            case 112: {
              object unknown;
              if(input.ReadEnum(ref result.applyto_, out unknown)) {
                result.hasApplyto = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(14, (ulong)(int)unknown);
              }
              break;
            }
            case 241: {
              result.hasGene = input.ReadDouble(ref result.gene_);
              break;
            }
            case 248: {
              result.hasIsAdjust = input.ReadBool(ref result.isAdjust_);
              break;
            }
            case 256: {
              result.hasAmount = input.ReadInt64(ref result.amount_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasDatetime {
        get { return result.hasDatetime; }
      }
      public long Datetime {
        get { return result.Datetime; }
        set { SetDatetime(value); }
      }
      public Builder SetDatetime(long value) {
        PrepareBuilder();
        result.hasDatetime = true;
        result.datetime_ = value;
        return this;
      }
      public Builder ClearDatetime() {
        PrepareBuilder();
        result.hasDatetime = false;
        result.datetime_ = 0L;
        return this;
      }
      
      public bool HasMillisec {
        get { return result.hasMillisec; }
      }
      public long Millisec {
        get { return result.Millisec; }
        set { SetMillisec(value); }
      }
      public Builder SetMillisec(long value) {
        PrepareBuilder();
        result.hasMillisec = true;
        result.millisec_ = value;
        return this;
      }
      public Builder ClearMillisec() {
        PrepareBuilder();
        result.hasMillisec = false;
        result.millisec_ = 0L;
        return this;
      }
      
      public bool HasInstrumentId {
        get { return result.hasInstrumentId; }
      }
      public string InstrumentId {
        get { return result.InstrumentId; }
        set { SetInstrumentId(value); }
      }
      public Builder SetInstrumentId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasInstrumentId = true;
        result.instrumentId_ = value;
        return this;
      }
      public Builder ClearInstrumentId() {
        PrepareBuilder();
        result.hasInstrumentId = false;
        result.instrumentId_ = "";
        return this;
      }
      
      public bool HasLastPrice {
        get { return result.hasLastPrice; }
      }
      public double LastPrice {
        get { return result.LastPrice; }
        set { SetLastPrice(value); }
      }
      public Builder SetLastPrice(double value) {
        PrepareBuilder();
        result.hasLastPrice = true;
        result.lastPrice_ = value;
        return this;
      }
      public Builder ClearLastPrice() {
        PrepareBuilder();
        result.hasLastPrice = false;
        result.lastPrice_ = 0D;
        return this;
      }
      
      public bool HasOpenPrice {
        get { return result.hasOpenPrice; }
      }
      public double OpenPrice {
        get { return result.OpenPrice; }
        set { SetOpenPrice(value); }
      }
      public Builder SetOpenPrice(double value) {
        PrepareBuilder();
        result.hasOpenPrice = true;
        result.openPrice_ = value;
        return this;
      }
      public Builder ClearOpenPrice() {
        PrepareBuilder();
        result.hasOpenPrice = false;
        result.openPrice_ = 0D;
        return this;
      }
      
      public bool HasClosePrice {
        get { return result.hasClosePrice; }
      }
      public double ClosePrice {
        get { return result.ClosePrice; }
        set { SetClosePrice(value); }
      }
      public Builder SetClosePrice(double value) {
        PrepareBuilder();
        result.hasClosePrice = true;
        result.closePrice_ = value;
        return this;
      }
      public Builder ClearClosePrice() {
        PrepareBuilder();
        result.hasClosePrice = false;
        result.closePrice_ = 0D;
        return this;
      }
      
      public bool HasHighPrice {
        get { return result.hasHighPrice; }
      }
      public double HighPrice {
        get { return result.HighPrice; }
        set { SetHighPrice(value); }
      }
      public Builder SetHighPrice(double value) {
        PrepareBuilder();
        result.hasHighPrice = true;
        result.highPrice_ = value;
        return this;
      }
      public Builder ClearHighPrice() {
        PrepareBuilder();
        result.hasHighPrice = false;
        result.highPrice_ = 0D;
        return this;
      }
      
      public bool HasLowPrice {
        get { return result.hasLowPrice; }
      }
      public double LowPrice {
        get { return result.LowPrice; }
        set { SetLowPrice(value); }
      }
      public Builder SetLowPrice(double value) {
        PrepareBuilder();
        result.hasLowPrice = true;
        result.lowPrice_ = value;
        return this;
      }
      public Builder ClearLowPrice() {
        PrepareBuilder();
        result.hasLowPrice = false;
        result.lowPrice_ = 0D;
        return this;
      }
      
      public bool HasVolume {
        get { return result.hasVolume; }
      }
      public long Volume {
        get { return result.Volume; }
        set { SetVolume(value); }
      }
      public Builder SetVolume(long value) {
        PrepareBuilder();
        result.hasVolume = true;
        result.volume_ = value;
        return this;
      }
      public Builder ClearVolume() {
        PrepareBuilder();
        result.hasVolume = false;
        result.volume_ = 0L;
        return this;
      }
      
      public bool HasPeriod {
        get { return result.hasPeriod; }
      }
      public string Period {
        get { return result.Period; }
        set { SetPeriod(value); }
      }
      public Builder SetPeriod(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPeriod = true;
        result.period_ = value;
        return this;
      }
      public Builder ClearPeriod() {
        PrepareBuilder();
        result.hasPeriod = false;
        result.period_ = "";
        return this;
      }
      
      public bool HasQuote {
       get { return result.hasQuote; }
      }
      public global::Tdx.Quote Quote {
        get { return result.Quote; }
        set { SetQuote(value); }
      }
      public Builder SetQuote(global::Tdx.Quote value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasQuote = true;
        result.quote_ = value;
        return this;
      }
      public Builder SetQuote(global::Tdx.Quote.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasQuote = true;
        result.quote_ = builderForValue.Build();
        return this;
      }
      public Builder MergeQuote(global::Tdx.Quote value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasQuote &&
            result.quote_ != global::Tdx.Quote.DefaultInstance) {
            result.quote_ = global::Tdx.Quote.CreateBuilder(result.quote_).MergeFrom(value).BuildPartial();
        } else {
          result.quote_ = value;
        }
        result.hasQuote = true;
        return this;
      }
      public Builder ClearQuote() {
        PrepareBuilder();
        result.hasQuote = false;
        result.quote_ = null;
        return this;
      }
      
      public bool HasExchangeId {
        get { return result.hasExchangeId; }
      }
      public string ExchangeId {
        get { return result.ExchangeId; }
        set { SetExchangeId(value); }
      }
      public Builder SetExchangeId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasExchangeId = true;
        result.exchangeId_ = value;
        return this;
      }
      public Builder ClearExchangeId() {
        PrepareBuilder();
        result.hasExchangeId = false;
        result.exchangeId_ = "";
        return this;
      }
      
      public bool HasTurnover {
        get { return result.hasTurnover; }
      }
      public double Turnover {
        get { return result.Turnover; }
        set { SetTurnover(value); }
      }
      public Builder SetTurnover(double value) {
        PrepareBuilder();
        result.hasTurnover = true;
        result.turnover_ = value;
        return this;
      }
      public Builder ClearTurnover() {
        PrepareBuilder();
        result.hasTurnover = false;
        result.turnover_ = 0D;
        return this;
      }
      
      public bool HasApplyto {
       get { return result.hasApplyto; }
      }
      public global::Tdx.Tick.Types.ApplyTo Applyto {
        get { return result.Applyto; }
        set { SetApplyto(value); }
      }
      public Builder SetApplyto(global::Tdx.Tick.Types.ApplyTo value) {
        PrepareBuilder();
        result.hasApplyto = true;
        result.applyto_ = value;
        return this;
      }
      public Builder ClearApplyto() {
        PrepareBuilder();
        result.hasApplyto = false;
        result.applyto_ = global::Tdx.Tick.Types.ApplyTo.CLOSE;
        return this;
      }
      
      public bool HasGene {
        get { return result.hasGene; }
      }
      public double Gene {
        get { return result.Gene; }
        set { SetGene(value); }
      }
      public Builder SetGene(double value) {
        PrepareBuilder();
        result.hasGene = true;
        result.gene_ = value;
        return this;
      }
      public Builder ClearGene() {
        PrepareBuilder();
        result.hasGene = false;
        result.gene_ = 0D;
        return this;
      }
      
      public bool HasIsAdjust {
        get { return result.hasIsAdjust; }
      }
      public bool IsAdjust {
        get { return result.IsAdjust; }
        set { SetIsAdjust(value); }
      }
      public Builder SetIsAdjust(bool value) {
        PrepareBuilder();
        result.hasIsAdjust = true;
        result.isAdjust_ = value;
        return this;
      }
      public Builder ClearIsAdjust() {
        PrepareBuilder();
        result.hasIsAdjust = false;
        result.isAdjust_ = false;
        return this;
      }
      
      public bool HasAmount {
        get { return result.hasAmount; }
      }
      public long Amount {
        get { return result.Amount; }
        set { SetAmount(value); }
      }
      public Builder SetAmount(long value) {
        PrepareBuilder();
        result.hasAmount = true;
        result.amount_ = value;
        return this;
      }
      public Builder ClearAmount() {
        PrepareBuilder();
        result.hasAmount = false;
        result.amount_ = 0L;
        return this;
      }
    }
    static Tick() {
      object.ReferenceEquals(global::Tdx.Proto.Tick.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Quote : pb::GeneratedMessage<Quote, Quote.Builder> {
    private Quote() { }
    private static readonly Quote defaultInstance = new Quote().MakeReadOnly();
    private static readonly string[] _quoteFieldNames = new string[] { "ask_price", "ask_volume", "bid_price", "bid_volume" };
    private static readonly uint[] _quoteFieldTags = new uint[] { 9, 24, 17, 32 };
    public static Quote DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Quote DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Quote ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Tdx.Proto.Tick.internal__static_common_Quote__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Quote, Quote.Builder> InternalFieldAccessors {
      get { return global::Tdx.Proto.Tick.internal__static_common_Quote__FieldAccessorTable; }
    }
    
    public const int AskPriceFieldNumber = 1;
    private pbc::PopsicleList<double> askPrice_ = new pbc::PopsicleList<double>();
    public scg::IList<double> AskPriceList {
      get { return pbc::Lists.AsReadOnly(askPrice_); }
    }
    public int AskPriceCount {
      get { return askPrice_.Count; }
    }
    public double GetAskPrice(int index) {
      return askPrice_[index];
    }
    
    public const int BidPriceFieldNumber = 2;
    private pbc::PopsicleList<double> bidPrice_ = new pbc::PopsicleList<double>();
    public scg::IList<double> BidPriceList {
      get { return pbc::Lists.AsReadOnly(bidPrice_); }
    }
    public int BidPriceCount {
      get { return bidPrice_.Count; }
    }
    public double GetBidPrice(int index) {
      return bidPrice_[index];
    }
    
    public const int AskVolumeFieldNumber = 3;
    private pbc::PopsicleList<long> askVolume_ = new pbc::PopsicleList<long>();
    public scg::IList<long> AskVolumeList {
      get { return pbc::Lists.AsReadOnly(askVolume_); }
    }
    public int AskVolumeCount {
      get { return askVolume_.Count; }
    }
    public long GetAskVolume(int index) {
      return askVolume_[index];
    }
    
    public const int BidVolumeFieldNumber = 4;
    private pbc::PopsicleList<long> bidVolume_ = new pbc::PopsicleList<long>();
    public scg::IList<long> BidVolumeList {
      get { return pbc::Lists.AsReadOnly(bidVolume_); }
    }
    public int BidVolumeCount {
      get { return bidVolume_.Count; }
    }
    public long GetBidVolume(int index) {
      return bidVolume_[index];
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _quoteFieldNames;
      if (askPrice_.Count > 0) {
        output.WriteDoubleArray(1, field_names[0], askPrice_);
      }
      if (bidPrice_.Count > 0) {
        output.WriteDoubleArray(2, field_names[2], bidPrice_);
      }
      if (askVolume_.Count > 0) {
        output.WriteInt64Array(3, field_names[1], askVolume_);
      }
      if (bidVolume_.Count > 0) {
        output.WriteInt64Array(4, field_names[3], bidVolume_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        {
          int dataSize = 0;
          dataSize = 8 * askPrice_.Count;
          size += dataSize;
          size += 1 * askPrice_.Count;
        }
        {
          int dataSize = 0;
          dataSize = 8 * bidPrice_.Count;
          size += dataSize;
          size += 1 * bidPrice_.Count;
        }
        {
          int dataSize = 0;
          foreach (long element in AskVolumeList) {
            dataSize += pb::CodedOutputStream.ComputeInt64SizeNoTag(element);
          }
          size += dataSize;
          size += 1 * askVolume_.Count;
        }
        {
          int dataSize = 0;
          foreach (long element in BidVolumeList) {
            dataSize += pb::CodedOutputStream.ComputeInt64SizeNoTag(element);
          }
          size += dataSize;
          size += 1 * bidVolume_.Count;
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Quote ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Quote ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Quote ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Quote ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Quote ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Quote ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Quote ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Quote ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Quote ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Quote ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Quote MakeReadOnly() {
      askPrice_.MakeReadOnly();
      bidPrice_.MakeReadOnly();
      askVolume_.MakeReadOnly();
      bidVolume_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Quote prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Quote, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Quote cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Quote result;
      
      private Quote PrepareBuilder() {
        if (resultIsReadOnly) {
          Quote original = result;
          result = new Quote();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Quote MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Tdx.Quote.Descriptor; }
      }
      
      public override Quote DefaultInstanceForType {
        get { return global::Tdx.Quote.DefaultInstance; }
      }
      
      public override Quote BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Quote) {
          return MergeFrom((Quote) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Quote other) {
        if (other == global::Tdx.Quote.DefaultInstance) return this;
        PrepareBuilder();
        if (other.askPrice_.Count != 0) {
          result.askPrice_.Add(other.askPrice_);
        }
        if (other.bidPrice_.Count != 0) {
          result.bidPrice_.Add(other.bidPrice_);
        }
        if (other.askVolume_.Count != 0) {
          result.askVolume_.Add(other.askVolume_);
        }
        if (other.bidVolume_.Count != 0) {
          result.bidVolume_.Add(other.bidVolume_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_quoteFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _quoteFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10:
            case 9: {
              input.ReadDoubleArray(tag, field_name, result.askPrice_);
              break;
            }
            case 18:
            case 17: {
              input.ReadDoubleArray(tag, field_name, result.bidPrice_);
              break;
            }
            case 26:
            case 24: {
              input.ReadInt64Array(tag, field_name, result.askVolume_);
              break;
            }
            case 34:
            case 32: {
              input.ReadInt64Array(tag, field_name, result.bidVolume_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<double> AskPriceList {
        get { return PrepareBuilder().askPrice_; }
      }
      public int AskPriceCount {
        get { return result.AskPriceCount; }
      }
      public double GetAskPrice(int index) {
        return result.GetAskPrice(index);
      }
      public Builder SetAskPrice(int index, double value) {
        PrepareBuilder();
        result.askPrice_[index] = value;
        return this;
      }
      public Builder AddAskPrice(double value) {
        PrepareBuilder();
        result.askPrice_.Add(value);
        return this;
      }
      public Builder AddRangeAskPrice(scg::IEnumerable<double> values) {
        PrepareBuilder();
        result.askPrice_.Add(values);
        return this;
      }
      public Builder ClearAskPrice() {
        PrepareBuilder();
        result.askPrice_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<double> BidPriceList {
        get { return PrepareBuilder().bidPrice_; }
      }
      public int BidPriceCount {
        get { return result.BidPriceCount; }
      }
      public double GetBidPrice(int index) {
        return result.GetBidPrice(index);
      }
      public Builder SetBidPrice(int index, double value) {
        PrepareBuilder();
        result.bidPrice_[index] = value;
        return this;
      }
      public Builder AddBidPrice(double value) {
        PrepareBuilder();
        result.bidPrice_.Add(value);
        return this;
      }
      public Builder AddRangeBidPrice(scg::IEnumerable<double> values) {
        PrepareBuilder();
        result.bidPrice_.Add(values);
        return this;
      }
      public Builder ClearBidPrice() {
        PrepareBuilder();
        result.bidPrice_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<long> AskVolumeList {
        get { return PrepareBuilder().askVolume_; }
      }
      public int AskVolumeCount {
        get { return result.AskVolumeCount; }
      }
      public long GetAskVolume(int index) {
        return result.GetAskVolume(index);
      }
      public Builder SetAskVolume(int index, long value) {
        PrepareBuilder();
        result.askVolume_[index] = value;
        return this;
      }
      public Builder AddAskVolume(long value) {
        PrepareBuilder();
        result.askVolume_.Add(value);
        return this;
      }
      public Builder AddRangeAskVolume(scg::IEnumerable<long> values) {
        PrepareBuilder();
        result.askVolume_.Add(values);
        return this;
      }
      public Builder ClearAskVolume() {
        PrepareBuilder();
        result.askVolume_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<long> BidVolumeList {
        get { return PrepareBuilder().bidVolume_; }
      }
      public int BidVolumeCount {
        get { return result.BidVolumeCount; }
      }
      public long GetBidVolume(int index) {
        return result.GetBidVolume(index);
      }
      public Builder SetBidVolume(int index, long value) {
        PrepareBuilder();
        result.bidVolume_[index] = value;
        return this;
      }
      public Builder AddBidVolume(long value) {
        PrepareBuilder();
        result.bidVolume_.Add(value);
        return this;
      }
      public Builder AddRangeBidVolume(scg::IEnumerable<long> values) {
        PrepareBuilder();
        result.bidVolume_.Add(values);
        return this;
      }
      public Builder ClearBidVolume() {
        PrepareBuilder();
        result.bidVolume_.Clear();
        return this;
      }
    }
    static Quote() {
      object.ReferenceEquals(global::Tdx.Proto.Tick.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
