// Generated by ProtoGen, Version=2.4.1.521, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace Tdx {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class Config {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_tdx_Zmq__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Tdx.Zmq, global::Tdx.Zmq.Builder> internal__static_tdx_Zmq__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_tdx_TradeConfig__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Tdx.TradeConfig, global::Tdx.TradeConfig.Builder> internal__static_tdx_TradeConfig__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static Config() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          "Cgxjb25maWcucHJvdG8SA3RkeCJuCgNabXESGwoEdHlwZRgBIAIoDjINLnRk" + 
          "eC5abXEuVHlwZRIPCgdhZGRyZXNzGAIgAigJEg0KBXRvcGljGAMgAygJIioK" + 
          "BFR5cGUSBwoDUFVCEAESBwoDU1VCEAISBwoDUkVREAMSBwoDUkVQEAQivAMK" + 
          "C1RyYWRlQ29uZmlnEhwKCm1hcmtldF9wdWIYASABKAsyCC50ZHguWm1xEhsK" + 
          "CW9yZGVyX3N1YhgCIAEoCzIILnRkeC5abXESGwoJb3JkZXJfcHViGAMgASgL" + 
          "MggudGR4LlptcRIVCg11bml2ZXJzZV9maWxlGAQgASgJEhIKCm1kX3NlcnZl" + 
          "cnMYBSADKAkSFAoMdHJhZGVfc2VydmVyGAYgASgJEhcKD2Z1bmRpbmdfYWNj" + 
          "b3VudBgHIAEoCRISCgpzaF9hY2NvdW50GAggASgJEhIKCnN6X2FjY291bnQY" + 
          "CSABKAkSFAoMdHJhZGVfcGFzc3dkGAogASgJEhoKEmNvbW11bmljYXRlX3Bh" + 
          "c3N3ZBgLIAEoCRIPCgdhbV9vcGVuGAwgASgJEhAKCGFtX2Nsb3NlGA0gASgJ" + 
          "Eg8KB3BtX29wZW4YDiABKAkSEAoIcG1fY2xvc2UYDyABKAkSCwoDZGRiGBAg" + 
          "ASgJEhMKC3RyYWRlX3N0YXJ0GBEgASgJEhIKCnRyYWRlX3N0b3AYEiABKAkS" + 
          "EgoKcG9zdF90cmFkZRgTIAEoCRIRCglleGl0X3RpbWUYFCABKAk=");
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_tdx_Zmq__Descriptor = Descriptor.MessageTypes[0];
        internal__static_tdx_Zmq__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Tdx.Zmq, global::Tdx.Zmq.Builder>(internal__static_tdx_Zmq__Descriptor,
                new string[] { "Type", "Address", "Topic", });
        internal__static_tdx_TradeConfig__Descriptor = Descriptor.MessageTypes[1];
        internal__static_tdx_TradeConfig__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Tdx.TradeConfig, global::Tdx.TradeConfig.Builder>(internal__static_tdx_TradeConfig__Descriptor,
                new string[] { "MarketPub", "OrderSub", "OrderPub", "UniverseFile", "MdServers", "TradeServer", "FundingAccount", "ShAccount", "SzAccount", "TradePasswd", "CommunicatePasswd", "AmOpen", "AmClose", "PmOpen", "PmClose", "Ddb", "TradeStart", "TradeStop", "PostTrade", "ExitTime", });
        return null;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          }, assigner);
    }
    #endregion
    
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Zmq : pb::GeneratedMessage<Zmq, Zmq.Builder> {
    private Zmq() { }
    private static readonly Zmq defaultInstance = new Zmq().MakeReadOnly();
    private static readonly string[] _zmqFieldNames = new string[] { "address", "topic", "type" };
    private static readonly uint[] _zmqFieldTags = new uint[] { 18, 26, 8 };
    public static Zmq DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Zmq DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Zmq ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Tdx.Config.internal__static_tdx_Zmq__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Zmq, Zmq.Builder> InternalFieldAccessors {
      get { return global::Tdx.Config.internal__static_tdx_Zmq__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      public enum Type {
        PUB = 1,
        SUB = 2,
        REQ = 3,
        REP = 4,
      }
      
    }
    #endregion
    
    public const int TypeFieldNumber = 1;
    private bool hasType;
    private global::Tdx.Zmq.Types.Type type_ = global::Tdx.Zmq.Types.Type.PUB;
    public bool HasType {
      get { return hasType; }
    }
    public global::Tdx.Zmq.Types.Type Type {
      get { return type_; }
    }
    
    public const int AddressFieldNumber = 2;
    private bool hasAddress;
    private string address_ = "";
    public bool HasAddress {
      get { return hasAddress; }
    }
    public string Address {
      get { return address_; }
    }
    
    public const int TopicFieldNumber = 3;
    private pbc::PopsicleList<string> topic_ = new pbc::PopsicleList<string>();
    public scg::IList<string> TopicList {
      get { return pbc::Lists.AsReadOnly(topic_); }
    }
    public int TopicCount {
      get { return topic_.Count; }
    }
    public string GetTopic(int index) {
      return topic_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasType) return false;
        if (!hasAddress) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _zmqFieldNames;
      if (hasType) {
        output.WriteEnum(1, field_names[2], (int) Type, Type);
      }
      if (hasAddress) {
        output.WriteString(2, field_names[0], Address);
      }
      if (topic_.Count > 0) {
        output.WriteStringArray(3, field_names[1], topic_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasType) {
          size += pb::CodedOutputStream.ComputeEnumSize(1, (int) Type);
        }
        if (hasAddress) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Address);
        }
        {
          int dataSize = 0;
          foreach (string element in TopicList) {
            dataSize += pb::CodedOutputStream.ComputeStringSizeNoTag(element);
          }
          size += dataSize;
          size += 1 * topic_.Count;
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Zmq ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Zmq ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Zmq ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Zmq ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Zmq ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Zmq ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Zmq ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Zmq ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Zmq ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Zmq ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Zmq MakeReadOnly() {
      topic_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Zmq prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Zmq, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Zmq cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Zmq result;
      
      private Zmq PrepareBuilder() {
        if (resultIsReadOnly) {
          Zmq original = result;
          result = new Zmq();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Zmq MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Tdx.Zmq.Descriptor; }
      }
      
      public override Zmq DefaultInstanceForType {
        get { return global::Tdx.Zmq.DefaultInstance; }
      }
      
      public override Zmq BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Zmq) {
          return MergeFrom((Zmq) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Zmq other) {
        if (other == global::Tdx.Zmq.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasType) {
          Type = other.Type;
        }
        if (other.HasAddress) {
          Address = other.Address;
        }
        if (other.topic_.Count != 0) {
          result.topic_.Add(other.topic_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_zmqFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _zmqFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              object unknown;
              if(input.ReadEnum(ref result.type_, out unknown)) {
                result.hasType = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(1, (ulong)(int)unknown);
              }
              break;
            }
            case 18: {
              result.hasAddress = input.ReadString(ref result.address_);
              break;
            }
            case 26: {
              input.ReadStringArray(tag, field_name, result.topic_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasType {
       get { return result.hasType; }
      }
      public global::Tdx.Zmq.Types.Type Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      public Builder SetType(global::Tdx.Zmq.Types.Type value) {
        PrepareBuilder();
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        PrepareBuilder();
        result.hasType = false;
        result.type_ = global::Tdx.Zmq.Types.Type.PUB;
        return this;
      }
      
      public bool HasAddress {
        get { return result.hasAddress; }
      }
      public string Address {
        get { return result.Address; }
        set { SetAddress(value); }
      }
      public Builder SetAddress(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAddress = true;
        result.address_ = value;
        return this;
      }
      public Builder ClearAddress() {
        PrepareBuilder();
        result.hasAddress = false;
        result.address_ = "";
        return this;
      }
      
      public pbc::IPopsicleList<string> TopicList {
        get { return PrepareBuilder().topic_; }
      }
      public int TopicCount {
        get { return result.TopicCount; }
      }
      public string GetTopic(int index) {
        return result.GetTopic(index);
      }
      public Builder SetTopic(int index, string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.topic_[index] = value;
        return this;
      }
      public Builder AddTopic(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.topic_.Add(value);
        return this;
      }
      public Builder AddRangeTopic(scg::IEnumerable<string> values) {
        PrepareBuilder();
        result.topic_.Add(values);
        return this;
      }
      public Builder ClearTopic() {
        PrepareBuilder();
        result.topic_.Clear();
        return this;
      }
    }
    static Zmq() {
      object.ReferenceEquals(global::Tdx.Config.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class TradeConfig : pb::GeneratedMessage<TradeConfig, TradeConfig.Builder> {
    private TradeConfig() { }
    private static readonly TradeConfig defaultInstance = new TradeConfig().MakeReadOnly();
    private static readonly string[] _tradeConfigFieldNames = new string[] { "am_close", "am_open", "communicate_passwd", "ddb", "exit_time", "funding_account", "market_pub", "md_servers", "order_pub", "order_sub", "pm_close", "pm_open", "post_trade", "sh_account", "sz_account", "trade_passwd", "trade_server", "trade_start", "trade_stop", "universe_file" };
    private static readonly uint[] _tradeConfigFieldTags = new uint[] { 106, 98, 90, 130, 162, 58, 10, 42, 26, 18, 122, 114, 154, 66, 74, 82, 50, 138, 146, 34 };
    public static TradeConfig DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override TradeConfig DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override TradeConfig ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Tdx.Config.internal__static_tdx_TradeConfig__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<TradeConfig, TradeConfig.Builder> InternalFieldAccessors {
      get { return global::Tdx.Config.internal__static_tdx_TradeConfig__FieldAccessorTable; }
    }
    
    public const int MarketPubFieldNumber = 1;
    private bool hasMarketPub;
    private global::Tdx.Zmq marketPub_;
    public bool HasMarketPub {
      get { return hasMarketPub; }
    }
    public global::Tdx.Zmq MarketPub {
      get { return marketPub_ ?? global::Tdx.Zmq.DefaultInstance; }
    }
    
    public const int OrderSubFieldNumber = 2;
    private bool hasOrderSub;
    private global::Tdx.Zmq orderSub_;
    public bool HasOrderSub {
      get { return hasOrderSub; }
    }
    public global::Tdx.Zmq OrderSub {
      get { return orderSub_ ?? global::Tdx.Zmq.DefaultInstance; }
    }
    
    public const int OrderPubFieldNumber = 3;
    private bool hasOrderPub;
    private global::Tdx.Zmq orderPub_;
    public bool HasOrderPub {
      get { return hasOrderPub; }
    }
    public global::Tdx.Zmq OrderPub {
      get { return orderPub_ ?? global::Tdx.Zmq.DefaultInstance; }
    }
    
    public const int UniverseFileFieldNumber = 4;
    private bool hasUniverseFile;
    private string universeFile_ = "";
    public bool HasUniverseFile {
      get { return hasUniverseFile; }
    }
    public string UniverseFile {
      get { return universeFile_; }
    }
    
    public const int MdServersFieldNumber = 5;
    private pbc::PopsicleList<string> mdServers_ = new pbc::PopsicleList<string>();
    public scg::IList<string> MdServersList {
      get { return pbc::Lists.AsReadOnly(mdServers_); }
    }
    public int MdServersCount {
      get { return mdServers_.Count; }
    }
    public string GetMdServers(int index) {
      return mdServers_[index];
    }
    
    public const int TradeServerFieldNumber = 6;
    private bool hasTradeServer;
    private string tradeServer_ = "";
    public bool HasTradeServer {
      get { return hasTradeServer; }
    }
    public string TradeServer {
      get { return tradeServer_; }
    }
    
    public const int FundingAccountFieldNumber = 7;
    private bool hasFundingAccount;
    private string fundingAccount_ = "";
    public bool HasFundingAccount {
      get { return hasFundingAccount; }
    }
    public string FundingAccount {
      get { return fundingAccount_; }
    }
    
    public const int ShAccountFieldNumber = 8;
    private bool hasShAccount;
    private string shAccount_ = "";
    public bool HasShAccount {
      get { return hasShAccount; }
    }
    public string ShAccount {
      get { return shAccount_; }
    }
    
    public const int SzAccountFieldNumber = 9;
    private bool hasSzAccount;
    private string szAccount_ = "";
    public bool HasSzAccount {
      get { return hasSzAccount; }
    }
    public string SzAccount {
      get { return szAccount_; }
    }
    
    public const int TradePasswdFieldNumber = 10;
    private bool hasTradePasswd;
    private string tradePasswd_ = "";
    public bool HasTradePasswd {
      get { return hasTradePasswd; }
    }
    public string TradePasswd {
      get { return tradePasswd_; }
    }
    
    public const int CommunicatePasswdFieldNumber = 11;
    private bool hasCommunicatePasswd;
    private string communicatePasswd_ = "";
    public bool HasCommunicatePasswd {
      get { return hasCommunicatePasswd; }
    }
    public string CommunicatePasswd {
      get { return communicatePasswd_; }
    }
    
    public const int AmOpenFieldNumber = 12;
    private bool hasAmOpen;
    private string amOpen_ = "";
    public bool HasAmOpen {
      get { return hasAmOpen; }
    }
    public string AmOpen {
      get { return amOpen_; }
    }
    
    public const int AmCloseFieldNumber = 13;
    private bool hasAmClose;
    private string amClose_ = "";
    public bool HasAmClose {
      get { return hasAmClose; }
    }
    public string AmClose {
      get { return amClose_; }
    }
    
    public const int PmOpenFieldNumber = 14;
    private bool hasPmOpen;
    private string pmOpen_ = "";
    public bool HasPmOpen {
      get { return hasPmOpen; }
    }
    public string PmOpen {
      get { return pmOpen_; }
    }
    
    public const int PmCloseFieldNumber = 15;
    private bool hasPmClose;
    private string pmClose_ = "";
    public bool HasPmClose {
      get { return hasPmClose; }
    }
    public string PmClose {
      get { return pmClose_; }
    }
    
    public const int DdbFieldNumber = 16;
    private bool hasDdb;
    private string ddb_ = "";
    public bool HasDdb {
      get { return hasDdb; }
    }
    public string Ddb {
      get { return ddb_; }
    }
    
    public const int TradeStartFieldNumber = 17;
    private bool hasTradeStart;
    private string tradeStart_ = "";
    public bool HasTradeStart {
      get { return hasTradeStart; }
    }
    public string TradeStart {
      get { return tradeStart_; }
    }
    
    public const int TradeStopFieldNumber = 18;
    private bool hasTradeStop;
    private string tradeStop_ = "";
    public bool HasTradeStop {
      get { return hasTradeStop; }
    }
    public string TradeStop {
      get { return tradeStop_; }
    }
    
    public const int PostTradeFieldNumber = 19;
    private bool hasPostTrade;
    private string postTrade_ = "";
    public bool HasPostTrade {
      get { return hasPostTrade; }
    }
    public string PostTrade {
      get { return postTrade_; }
    }
    
    public const int ExitTimeFieldNumber = 20;
    private bool hasExitTime;
    private string exitTime_ = "";
    public bool HasExitTime {
      get { return hasExitTime; }
    }
    public string ExitTime {
      get { return exitTime_; }
    }
    
    public override bool IsInitialized {
      get {
        if (HasMarketPub) {
          if (!MarketPub.IsInitialized) return false;
        }
        if (HasOrderSub) {
          if (!OrderSub.IsInitialized) return false;
        }
        if (HasOrderPub) {
          if (!OrderPub.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _tradeConfigFieldNames;
      if (hasMarketPub) {
        output.WriteMessage(1, field_names[6], MarketPub);
      }
      if (hasOrderSub) {
        output.WriteMessage(2, field_names[9], OrderSub);
      }
      if (hasOrderPub) {
        output.WriteMessage(3, field_names[8], OrderPub);
      }
      if (hasUniverseFile) {
        output.WriteString(4, field_names[19], UniverseFile);
      }
      if (mdServers_.Count > 0) {
        output.WriteStringArray(5, field_names[7], mdServers_);
      }
      if (hasTradeServer) {
        output.WriteString(6, field_names[16], TradeServer);
      }
      if (hasFundingAccount) {
        output.WriteString(7, field_names[5], FundingAccount);
      }
      if (hasShAccount) {
        output.WriteString(8, field_names[13], ShAccount);
      }
      if (hasSzAccount) {
        output.WriteString(9, field_names[14], SzAccount);
      }
      if (hasTradePasswd) {
        output.WriteString(10, field_names[15], TradePasswd);
      }
      if (hasCommunicatePasswd) {
        output.WriteString(11, field_names[2], CommunicatePasswd);
      }
      if (hasAmOpen) {
        output.WriteString(12, field_names[1], AmOpen);
      }
      if (hasAmClose) {
        output.WriteString(13, field_names[0], AmClose);
      }
      if (hasPmOpen) {
        output.WriteString(14, field_names[11], PmOpen);
      }
      if (hasPmClose) {
        output.WriteString(15, field_names[10], PmClose);
      }
      if (hasDdb) {
        output.WriteString(16, field_names[3], Ddb);
      }
      if (hasTradeStart) {
        output.WriteString(17, field_names[17], TradeStart);
      }
      if (hasTradeStop) {
        output.WriteString(18, field_names[18], TradeStop);
      }
      if (hasPostTrade) {
        output.WriteString(19, field_names[12], PostTrade);
      }
      if (hasExitTime) {
        output.WriteString(20, field_names[4], ExitTime);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasMarketPub) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, MarketPub);
        }
        if (hasOrderSub) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, OrderSub);
        }
        if (hasOrderPub) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, OrderPub);
        }
        if (hasUniverseFile) {
          size += pb::CodedOutputStream.ComputeStringSize(4, UniverseFile);
        }
        {
          int dataSize = 0;
          foreach (string element in MdServersList) {
            dataSize += pb::CodedOutputStream.ComputeStringSizeNoTag(element);
          }
          size += dataSize;
          size += 1 * mdServers_.Count;
        }
        if (hasTradeServer) {
          size += pb::CodedOutputStream.ComputeStringSize(6, TradeServer);
        }
        if (hasFundingAccount) {
          size += pb::CodedOutputStream.ComputeStringSize(7, FundingAccount);
        }
        if (hasShAccount) {
          size += pb::CodedOutputStream.ComputeStringSize(8, ShAccount);
        }
        if (hasSzAccount) {
          size += pb::CodedOutputStream.ComputeStringSize(9, SzAccount);
        }
        if (hasTradePasswd) {
          size += pb::CodedOutputStream.ComputeStringSize(10, TradePasswd);
        }
        if (hasCommunicatePasswd) {
          size += pb::CodedOutputStream.ComputeStringSize(11, CommunicatePasswd);
        }
        if (hasAmOpen) {
          size += pb::CodedOutputStream.ComputeStringSize(12, AmOpen);
        }
        if (hasAmClose) {
          size += pb::CodedOutputStream.ComputeStringSize(13, AmClose);
        }
        if (hasPmOpen) {
          size += pb::CodedOutputStream.ComputeStringSize(14, PmOpen);
        }
        if (hasPmClose) {
          size += pb::CodedOutputStream.ComputeStringSize(15, PmClose);
        }
        if (hasDdb) {
          size += pb::CodedOutputStream.ComputeStringSize(16, Ddb);
        }
        if (hasTradeStart) {
          size += pb::CodedOutputStream.ComputeStringSize(17, TradeStart);
        }
        if (hasTradeStop) {
          size += pb::CodedOutputStream.ComputeStringSize(18, TradeStop);
        }
        if (hasPostTrade) {
          size += pb::CodedOutputStream.ComputeStringSize(19, PostTrade);
        }
        if (hasExitTime) {
          size += pb::CodedOutputStream.ComputeStringSize(20, ExitTime);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static TradeConfig ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static TradeConfig ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static TradeConfig ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static TradeConfig ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static TradeConfig ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static TradeConfig ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static TradeConfig ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static TradeConfig ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static TradeConfig ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static TradeConfig ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private TradeConfig MakeReadOnly() {
      mdServers_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(TradeConfig prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<TradeConfig, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(TradeConfig cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private TradeConfig result;
      
      private TradeConfig PrepareBuilder() {
        if (resultIsReadOnly) {
          TradeConfig original = result;
          result = new TradeConfig();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override TradeConfig MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Tdx.TradeConfig.Descriptor; }
      }
      
      public override TradeConfig DefaultInstanceForType {
        get { return global::Tdx.TradeConfig.DefaultInstance; }
      }
      
      public override TradeConfig BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is TradeConfig) {
          return MergeFrom((TradeConfig) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(TradeConfig other) {
        if (other == global::Tdx.TradeConfig.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasMarketPub) {
          MergeMarketPub(other.MarketPub);
        }
        if (other.HasOrderSub) {
          MergeOrderSub(other.OrderSub);
        }
        if (other.HasOrderPub) {
          MergeOrderPub(other.OrderPub);
        }
        if (other.HasUniverseFile) {
          UniverseFile = other.UniverseFile;
        }
        if (other.mdServers_.Count != 0) {
          result.mdServers_.Add(other.mdServers_);
        }
        if (other.HasTradeServer) {
          TradeServer = other.TradeServer;
        }
        if (other.HasFundingAccount) {
          FundingAccount = other.FundingAccount;
        }
        if (other.HasShAccount) {
          ShAccount = other.ShAccount;
        }
        if (other.HasSzAccount) {
          SzAccount = other.SzAccount;
        }
        if (other.HasTradePasswd) {
          TradePasswd = other.TradePasswd;
        }
        if (other.HasCommunicatePasswd) {
          CommunicatePasswd = other.CommunicatePasswd;
        }
        if (other.HasAmOpen) {
          AmOpen = other.AmOpen;
        }
        if (other.HasAmClose) {
          AmClose = other.AmClose;
        }
        if (other.HasPmOpen) {
          PmOpen = other.PmOpen;
        }
        if (other.HasPmClose) {
          PmClose = other.PmClose;
        }
        if (other.HasDdb) {
          Ddb = other.Ddb;
        }
        if (other.HasTradeStart) {
          TradeStart = other.TradeStart;
        }
        if (other.HasTradeStop) {
          TradeStop = other.TradeStop;
        }
        if (other.HasPostTrade) {
          PostTrade = other.PostTrade;
        }
        if (other.HasExitTime) {
          ExitTime = other.ExitTime;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_tradeConfigFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _tradeConfigFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::Tdx.Zmq.Builder subBuilder = global::Tdx.Zmq.CreateBuilder();
              if (result.hasMarketPub) {
                subBuilder.MergeFrom(MarketPub);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              MarketPub = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              global::Tdx.Zmq.Builder subBuilder = global::Tdx.Zmq.CreateBuilder();
              if (result.hasOrderSub) {
                subBuilder.MergeFrom(OrderSub);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              OrderSub = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              global::Tdx.Zmq.Builder subBuilder = global::Tdx.Zmq.CreateBuilder();
              if (result.hasOrderPub) {
                subBuilder.MergeFrom(OrderPub);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              OrderPub = subBuilder.BuildPartial();
              break;
            }
            case 34: {
              result.hasUniverseFile = input.ReadString(ref result.universeFile_);
              break;
            }
            case 42: {
              input.ReadStringArray(tag, field_name, result.mdServers_);
              break;
            }
            case 50: {
              result.hasTradeServer = input.ReadString(ref result.tradeServer_);
              break;
            }
            case 58: {
              result.hasFundingAccount = input.ReadString(ref result.fundingAccount_);
              break;
            }
            case 66: {
              result.hasShAccount = input.ReadString(ref result.shAccount_);
              break;
            }
            case 74: {
              result.hasSzAccount = input.ReadString(ref result.szAccount_);
              break;
            }
            case 82: {
              result.hasTradePasswd = input.ReadString(ref result.tradePasswd_);
              break;
            }
            case 90: {
              result.hasCommunicatePasswd = input.ReadString(ref result.communicatePasswd_);
              break;
            }
            case 98: {
              result.hasAmOpen = input.ReadString(ref result.amOpen_);
              break;
            }
            case 106: {
              result.hasAmClose = input.ReadString(ref result.amClose_);
              break;
            }
            case 114: {
              result.hasPmOpen = input.ReadString(ref result.pmOpen_);
              break;
            }
            case 122: {
              result.hasPmClose = input.ReadString(ref result.pmClose_);
              break;
            }
            case 130: {
              result.hasDdb = input.ReadString(ref result.ddb_);
              break;
            }
            case 138: {
              result.hasTradeStart = input.ReadString(ref result.tradeStart_);
              break;
            }
            case 146: {
              result.hasTradeStop = input.ReadString(ref result.tradeStop_);
              break;
            }
            case 154: {
              result.hasPostTrade = input.ReadString(ref result.postTrade_);
              break;
            }
            case 162: {
              result.hasExitTime = input.ReadString(ref result.exitTime_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasMarketPub {
       get { return result.hasMarketPub; }
      }
      public global::Tdx.Zmq MarketPub {
        get { return result.MarketPub; }
        set { SetMarketPub(value); }
      }
      public Builder SetMarketPub(global::Tdx.Zmq value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMarketPub = true;
        result.marketPub_ = value;
        return this;
      }
      public Builder SetMarketPub(global::Tdx.Zmq.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasMarketPub = true;
        result.marketPub_ = builderForValue.Build();
        return this;
      }
      public Builder MergeMarketPub(global::Tdx.Zmq value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasMarketPub &&
            result.marketPub_ != global::Tdx.Zmq.DefaultInstance) {
            result.marketPub_ = global::Tdx.Zmq.CreateBuilder(result.marketPub_).MergeFrom(value).BuildPartial();
        } else {
          result.marketPub_ = value;
        }
        result.hasMarketPub = true;
        return this;
      }
      public Builder ClearMarketPub() {
        PrepareBuilder();
        result.hasMarketPub = false;
        result.marketPub_ = null;
        return this;
      }
      
      public bool HasOrderSub {
       get { return result.hasOrderSub; }
      }
      public global::Tdx.Zmq OrderSub {
        get { return result.OrderSub; }
        set { SetOrderSub(value); }
      }
      public Builder SetOrderSub(global::Tdx.Zmq value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasOrderSub = true;
        result.orderSub_ = value;
        return this;
      }
      public Builder SetOrderSub(global::Tdx.Zmq.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasOrderSub = true;
        result.orderSub_ = builderForValue.Build();
        return this;
      }
      public Builder MergeOrderSub(global::Tdx.Zmq value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasOrderSub &&
            result.orderSub_ != global::Tdx.Zmq.DefaultInstance) {
            result.orderSub_ = global::Tdx.Zmq.CreateBuilder(result.orderSub_).MergeFrom(value).BuildPartial();
        } else {
          result.orderSub_ = value;
        }
        result.hasOrderSub = true;
        return this;
      }
      public Builder ClearOrderSub() {
        PrepareBuilder();
        result.hasOrderSub = false;
        result.orderSub_ = null;
        return this;
      }
      
      public bool HasOrderPub {
       get { return result.hasOrderPub; }
      }
      public global::Tdx.Zmq OrderPub {
        get { return result.OrderPub; }
        set { SetOrderPub(value); }
      }
      public Builder SetOrderPub(global::Tdx.Zmq value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasOrderPub = true;
        result.orderPub_ = value;
        return this;
      }
      public Builder SetOrderPub(global::Tdx.Zmq.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasOrderPub = true;
        result.orderPub_ = builderForValue.Build();
        return this;
      }
      public Builder MergeOrderPub(global::Tdx.Zmq value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasOrderPub &&
            result.orderPub_ != global::Tdx.Zmq.DefaultInstance) {
            result.orderPub_ = global::Tdx.Zmq.CreateBuilder(result.orderPub_).MergeFrom(value).BuildPartial();
        } else {
          result.orderPub_ = value;
        }
        result.hasOrderPub = true;
        return this;
      }
      public Builder ClearOrderPub() {
        PrepareBuilder();
        result.hasOrderPub = false;
        result.orderPub_ = null;
        return this;
      }
      
      public bool HasUniverseFile {
        get { return result.hasUniverseFile; }
      }
      public string UniverseFile {
        get { return result.UniverseFile; }
        set { SetUniverseFile(value); }
      }
      public Builder SetUniverseFile(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUniverseFile = true;
        result.universeFile_ = value;
        return this;
      }
      public Builder ClearUniverseFile() {
        PrepareBuilder();
        result.hasUniverseFile = false;
        result.universeFile_ = "";
        return this;
      }
      
      public pbc::IPopsicleList<string> MdServersList {
        get { return PrepareBuilder().mdServers_; }
      }
      public int MdServersCount {
        get { return result.MdServersCount; }
      }
      public string GetMdServers(int index) {
        return result.GetMdServers(index);
      }
      public Builder SetMdServers(int index, string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.mdServers_[index] = value;
        return this;
      }
      public Builder AddMdServers(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.mdServers_.Add(value);
        return this;
      }
      public Builder AddRangeMdServers(scg::IEnumerable<string> values) {
        PrepareBuilder();
        result.mdServers_.Add(values);
        return this;
      }
      public Builder ClearMdServers() {
        PrepareBuilder();
        result.mdServers_.Clear();
        return this;
      }
      
      public bool HasTradeServer {
        get { return result.hasTradeServer; }
      }
      public string TradeServer {
        get { return result.TradeServer; }
        set { SetTradeServer(value); }
      }
      public Builder SetTradeServer(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTradeServer = true;
        result.tradeServer_ = value;
        return this;
      }
      public Builder ClearTradeServer() {
        PrepareBuilder();
        result.hasTradeServer = false;
        result.tradeServer_ = "";
        return this;
      }
      
      public bool HasFundingAccount {
        get { return result.hasFundingAccount; }
      }
      public string FundingAccount {
        get { return result.FundingAccount; }
        set { SetFundingAccount(value); }
      }
      public Builder SetFundingAccount(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasFundingAccount = true;
        result.fundingAccount_ = value;
        return this;
      }
      public Builder ClearFundingAccount() {
        PrepareBuilder();
        result.hasFundingAccount = false;
        result.fundingAccount_ = "";
        return this;
      }
      
      public bool HasShAccount {
        get { return result.hasShAccount; }
      }
      public string ShAccount {
        get { return result.ShAccount; }
        set { SetShAccount(value); }
      }
      public Builder SetShAccount(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasShAccount = true;
        result.shAccount_ = value;
        return this;
      }
      public Builder ClearShAccount() {
        PrepareBuilder();
        result.hasShAccount = false;
        result.shAccount_ = "";
        return this;
      }
      
      public bool HasSzAccount {
        get { return result.hasSzAccount; }
      }
      public string SzAccount {
        get { return result.SzAccount; }
        set { SetSzAccount(value); }
      }
      public Builder SetSzAccount(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSzAccount = true;
        result.szAccount_ = value;
        return this;
      }
      public Builder ClearSzAccount() {
        PrepareBuilder();
        result.hasSzAccount = false;
        result.szAccount_ = "";
        return this;
      }
      
      public bool HasTradePasswd {
        get { return result.hasTradePasswd; }
      }
      public string TradePasswd {
        get { return result.TradePasswd; }
        set { SetTradePasswd(value); }
      }
      public Builder SetTradePasswd(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTradePasswd = true;
        result.tradePasswd_ = value;
        return this;
      }
      public Builder ClearTradePasswd() {
        PrepareBuilder();
        result.hasTradePasswd = false;
        result.tradePasswd_ = "";
        return this;
      }
      
      public bool HasCommunicatePasswd {
        get { return result.hasCommunicatePasswd; }
      }
      public string CommunicatePasswd {
        get { return result.CommunicatePasswd; }
        set { SetCommunicatePasswd(value); }
      }
      public Builder SetCommunicatePasswd(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCommunicatePasswd = true;
        result.communicatePasswd_ = value;
        return this;
      }
      public Builder ClearCommunicatePasswd() {
        PrepareBuilder();
        result.hasCommunicatePasswd = false;
        result.communicatePasswd_ = "";
        return this;
      }
      
      public bool HasAmOpen {
        get { return result.hasAmOpen; }
      }
      public string AmOpen {
        get { return result.AmOpen; }
        set { SetAmOpen(value); }
      }
      public Builder SetAmOpen(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAmOpen = true;
        result.amOpen_ = value;
        return this;
      }
      public Builder ClearAmOpen() {
        PrepareBuilder();
        result.hasAmOpen = false;
        result.amOpen_ = "";
        return this;
      }
      
      public bool HasAmClose {
        get { return result.hasAmClose; }
      }
      public string AmClose {
        get { return result.AmClose; }
        set { SetAmClose(value); }
      }
      public Builder SetAmClose(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAmClose = true;
        result.amClose_ = value;
        return this;
      }
      public Builder ClearAmClose() {
        PrepareBuilder();
        result.hasAmClose = false;
        result.amClose_ = "";
        return this;
      }
      
      public bool HasPmOpen {
        get { return result.hasPmOpen; }
      }
      public string PmOpen {
        get { return result.PmOpen; }
        set { SetPmOpen(value); }
      }
      public Builder SetPmOpen(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPmOpen = true;
        result.pmOpen_ = value;
        return this;
      }
      public Builder ClearPmOpen() {
        PrepareBuilder();
        result.hasPmOpen = false;
        result.pmOpen_ = "";
        return this;
      }
      
      public bool HasPmClose {
        get { return result.hasPmClose; }
      }
      public string PmClose {
        get { return result.PmClose; }
        set { SetPmClose(value); }
      }
      public Builder SetPmClose(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPmClose = true;
        result.pmClose_ = value;
        return this;
      }
      public Builder ClearPmClose() {
        PrepareBuilder();
        result.hasPmClose = false;
        result.pmClose_ = "";
        return this;
      }
      
      public bool HasDdb {
        get { return result.hasDdb; }
      }
      public string Ddb {
        get { return result.Ddb; }
        set { SetDdb(value); }
      }
      public Builder SetDdb(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDdb = true;
        result.ddb_ = value;
        return this;
      }
      public Builder ClearDdb() {
        PrepareBuilder();
        result.hasDdb = false;
        result.ddb_ = "";
        return this;
      }
      
      public bool HasTradeStart {
        get { return result.hasTradeStart; }
      }
      public string TradeStart {
        get { return result.TradeStart; }
        set { SetTradeStart(value); }
      }
      public Builder SetTradeStart(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTradeStart = true;
        result.tradeStart_ = value;
        return this;
      }
      public Builder ClearTradeStart() {
        PrepareBuilder();
        result.hasTradeStart = false;
        result.tradeStart_ = "";
        return this;
      }
      
      public bool HasTradeStop {
        get { return result.hasTradeStop; }
      }
      public string TradeStop {
        get { return result.TradeStop; }
        set { SetTradeStop(value); }
      }
      public Builder SetTradeStop(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTradeStop = true;
        result.tradeStop_ = value;
        return this;
      }
      public Builder ClearTradeStop() {
        PrepareBuilder();
        result.hasTradeStop = false;
        result.tradeStop_ = "";
        return this;
      }
      
      public bool HasPostTrade {
        get { return result.hasPostTrade; }
      }
      public string PostTrade {
        get { return result.PostTrade; }
        set { SetPostTrade(value); }
      }
      public Builder SetPostTrade(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPostTrade = true;
        result.postTrade_ = value;
        return this;
      }
      public Builder ClearPostTrade() {
        PrepareBuilder();
        result.hasPostTrade = false;
        result.postTrade_ = "";
        return this;
      }
      
      public bool HasExitTime {
        get { return result.hasExitTime; }
      }
      public string ExitTime {
        get { return result.ExitTime; }
        set { SetExitTime(value); }
      }
      public Builder SetExitTime(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasExitTime = true;
        result.exitTime_ = value;
        return this;
      }
      public Builder ClearExitTime() {
        PrepareBuilder();
        result.hasExitTime = false;
        result.exitTime_ = "";
        return this;
      }
    }
    static TradeConfig() {
      object.ReferenceEquals(global::Tdx.Config.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
